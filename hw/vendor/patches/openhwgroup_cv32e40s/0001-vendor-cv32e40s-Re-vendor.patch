

diff --git a/rtl/cv32e40s_controller_bypass.sv b/rtl/cv32e40s_controller_bypass.sv
index 770f933c..4fd10467 100644
--- a/rtl/cv32e40s_controller_bypass.sv
+++ b/rtl/cv32e40s_controller_bypass.sv
@@ -100,6 +100,7 @@ module cv32e40s_controller_bypass import cv32e40s_pkg::*;
   logic                              csr_impl_rd_unqual_id;     // Implicit CSR read in ID (not qualified)
   logic                              jmpr_unqual_id;            // JALR in ID (not qualified with alu_en)
   logic                              sys_wfi_unqual_id;         // WFI in ID (not qualified with sys_en)
+  logic                              sys_wfe_unqual_id;         // WFE in ID (not qualified with sys_en)
   logic                              tbljmp_unqual_id;          // Table jump in ID (not qualified with alu_en)
 
   // Dummy or hint instructions in stages
diff --git a/rtl/cv32e40s_core.sv b/rtl/cv32e40s_core.sv
index 88f1a6f1..fa80ac3f 100644
--- a/rtl/cv32e40s_core.sv
+++ b/rtl/cv32e40s_core.sv
@@ -436,7 +436,7 @@ module cv32e40s_core import cv32e40s_pkg::*;
   assign dbg_ack   = ctrl_fsm.dbg_ack;
 
   // Gate off the internal debug_request signal if debug support is not configured.
-  assign debug_req_gated = DEBUG ? debug_req_i : 1'b0;
+  assign debug_req_gated = (DEBUG != 0) ? debug_req_i : 1'b0;
 
   //////////////////////////////////////////////////////////////////////////////////////////////
   //   ____ _            _      __  __                                                   _    //
diff --git a/rtl/cv32e40s_cs_registers.sv b/rtl/cv32e40s_cs_registers.sv
index 7c3b6546..6f44ea92 100644
--- a/rtl/cv32e40s_cs_registers.sv
+++ b/rtl/cv32e40s_cs_registers.sv
@@ -147,7 +147,8 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
 
   localparam PMP_ADDR_WIDTH = (PMP_GRANULARITY > 0) ? 33 - PMP_GRANULARITY : 32;
 
-  localparam bit USER = SECURE;
+  // localparam bit USER = SECURE;
+  localparam bit SHADOW = 0;
 
   localparam logic [31:0] MISA_VALUE =
     (32'(1)             <<  2) | // C - Compressed extension
@@ -352,13 +353,15 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
 
 
   // Performance Counter Signals
-  logic [31:0] [63:0]           mhpmcounter_q;                                  // Performance counters
+  // logic [31:0] [63:0]           mhpmcounter_q;                                  // Performance counters
+  logic [63:0]                  mhpmcounter_q[32];                              // Performance counters
   logic [31:0] [63:0]           mhpmcounter_n;                                  // Performance counters next value
   logic [31:0] [63:0]           mhpmcounter_rdata;                              // Performance counters next value
   logic [31:0] [1:0]            mhpmcounter_we;                                 // Performance counters write enable
   logic [31:0] [31:0]           mhpmevent_q, mhpmevent_n, mhpmevent_rdata;      // Event enable
   logic [31:0]                  mcountinhibit_q, mcountinhibit_n, mcountinhibit_rdata; // Performance counter inhibit
-  logic [NUM_HPM_EVENTS-1:0]    hpm_events;                                     // Events for performance counters
+  // logic [NUM_HPM_EVENTS-1:0]    hpm_events;                                     // Events for performance counters
+  logic                         hpm_events[NUM_HPM_EVENTS];                     // Events for performance counters
   logic [31:0] [63:0]           mhpmcounter_increment;                          // Increment of mhpmcounter_q
   logic [31:0]                  mhpmcounter_write_lower;                        // Write 32 lower bits of mhpmcounter_q
   logic [31:0]                  mhpmcounter_write_upper;                        // Write 32 upper bits mhpmcounter_q
@@ -701,7 +704,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
       end
 
       CSR_DCSR: begin
-        if (DEBUG) begin
+        if (DEBUG != 0) begin
           csr_rdata_int = dcsr_rdata;
           illegal_csr_read = !ctrl_fsm_i.debug_mode;
         end else begin
@@ -711,7 +714,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
       end
 
       CSR_DPC: begin
-        if (DEBUG) begin
+        if (DEBUG != 0) begin
           csr_rdata_int = dpc_rdata;
           illegal_csr_read = !ctrl_fsm_i.debug_mode;
         end else begin
@@ -721,7 +724,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
       end
 
       CSR_DSCRATCH0: begin
-        if (DEBUG) begin
+        if (DEBUG != 0) begin
           csr_rdata_int = dscratch0_rdata;
           illegal_csr_read = !ctrl_fsm_i.debug_mode;
         end else begin
@@ -731,7 +734,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
       end
 
       CSR_DSCRATCH1: begin
-        if (DEBUG) begin
+        if (DEBUG != 0) begin
           csr_rdata_int = dscratch1_rdata;
           illegal_csr_read = !ctrl_fsm_i.debug_mode;
         end else begin
@@ -1649,8 +1652,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
         end
       end //ctrl_fsm_i.csr_save_cause
 
-      ctrl_fsm_i.csr_restore_mret,
-      ctrl_fsm_i.csr_restore_mret_ptr: begin // MRET
+      ctrl_fsm_i.csr_restore_mret: begin // MRET
         priv_lvl_n     = privlvl_t'(mstatus_rdata.mpp);
         priv_lvl_we    = 1'b1;
 
@@ -1740,7 +1742,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
     .LIB        (LIB),
     .WIDTH      (32),
     .MASK       (CSR_MSTATEEN0_MASK),
-    .SHADOWCOPY (SECURE),
+    .SHADOWCOPY (SHADOW),
     .RESETVALUE (MSTATEEN0_RESET_VAL)
   )
   mstateen0_csr_i
@@ -1759,7 +1761,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
     .LIB        (LIB),
     .WIDTH      (32),
     .MASK       (CSR_JVT_MASK),
-    .SHADOWCOPY (SECURE),
+    .SHADOWCOPY (SHADOW),
     .RESETVALUE (JVT_RESET_VAL)
   )
   jvt_csr_i
@@ -1774,7 +1776,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
   );
 
   generate
-    if (DEBUG) begin : gen_debug_csr
+    if (DEBUG != 0) begin : gen_debug_csr
       cv32e40s_csr
       #(
         .LIB        (LIB                ),
@@ -1818,7 +1820,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
         .LIB        (LIB),
         .WIDTH      (32),
         .MASK       (CSR_DCSR_MASK),
-        .SHADOWCOPY (SECURE),
+        .SHADOWCOPY (SHADOW),
         .RESETVALUE (DCSR_RESET_VAL)
       )
       dcsr_csr_i
@@ -1867,7 +1869,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
     .LIB        (LIB),
     .WIDTH      (32),
     .MASK       (CSR_MEPC_MASK),
-    .SHADOWCOPY (SECURE),
+    .SHADOWCOPY (SHADOW),
     .RESETVALUE (MEPC_RESET_VAL)
   )
   mepc_csr_i
@@ -1886,7 +1888,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
     .LIB        (LIB),
     .WIDTH      (32),
     .MASK       (CSR_MSCRATCH_MASK),
-    .SHADOWCOPY (SECURE),
+    .SHADOWCOPY (SHADOW),
     .RESETVALUE (MSCRATCH_RESET_VAL)
   )
   mscratch_csr_i
@@ -1905,7 +1907,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
     .LIB        (LIB),
     .WIDTH      (32),
     .MASK       (CSR_MSTATUS_MASK),
-    .SHADOWCOPY (SECURE),
+    .SHADOWCOPY (SHADOW),
     .RESETVALUE (MSTATUS_RESET_VAL)
   )
   mstatus_csr_i
@@ -1930,7 +1932,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
       #(
         .LIB        (LIB                  ),
         .WIDTH      (32                   ),
-        .SHADOWCOPY (SECURE               ),
+        .SHADOWCOPY (SHADOW               ),
         .MASK       (CSR_CLIC_MCAUSE_MASK ),
         .RESETVALUE (MCAUSE_CLIC_RESET_VAL)
       )
@@ -1950,7 +1952,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
         .WIDTH      (32),
         .MASK       (CSR_CLIC_MTVEC_MASK),
         .RESETVALUE (MTVEC_CLIC_RESET_VAL),
-        .SHADOWCOPY (SECURE)
+        .SHADOWCOPY (SHADOW)
       )
       mtvec_csr_i
       (
@@ -1968,7 +1970,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
         .LIB        (LIB),
         .WIDTH      (32),
         .MASK       (CSR_MTVT_MASK),
-        .SHADOWCOPY (SECURE),
+        .SHADOWCOPY (SHADOW),
         .RESETVALUE (MTVT_RESET_VAL)
       )
       mtvt_csr_i
@@ -1987,7 +1989,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
         .LIB        (LIB),
         .WIDTH      (32),
         .MASK       (CSR_MINTSTATUS_MASK),
-        .SHADOWCOPY (SECURE),
+        .SHADOWCOPY (SHADOW),
         .RESETVALUE (MINTSTATUS_RESET_VAL)
       )
       mintstatus_csr_i
@@ -2006,7 +2008,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
         .LIB        (LIB),
         .WIDTH      (32),
         .MASK       (CSR_MINTTHRESH_MASK),
-        .SHADOWCOPY (SECURE),
+        .SHADOWCOPY (SHADOW),
         .RESETVALUE (MINTTHRESH_RESET_VAL)
       )
       mintthresh_csr_i
@@ -2029,7 +2031,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
       #(
         .LIB        (LIB                   ),
         .WIDTH      (32                    ),
-        .SHADOWCOPY (SECURE                ),
+        .SHADOWCOPY (SHADOW                ),
         .MASK       (CSR_BASIC_MCAUSE_MASK ),
         .RESETVALUE (MCAUSE_BASIC_RESET_VAL)
       )
@@ -2048,7 +2050,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
         .LIB        (LIB),
         .WIDTH      (32),
         .MASK       (CSR_BASIC_MTVEC_MASK),
-        .SHADOWCOPY (SECURE),
+        .SHADOWCOPY (SHADOW),
         .RESETVALUE (MTVEC_BASIC_RESET_VAL)
       )
       mtvec_csr_i
@@ -2067,7 +2069,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
         .LIB        (LIB),
         .WIDTH      (32),
         .MASK       (IRQ_MASK),
-        .SHADOWCOPY (SECURE),
+        .SHADOWCOPY (SHADOW),
         .RESETVALUE (MIE_BASIC_RESET_VAL)
       )
       mie_csr_i
@@ -2090,9 +2092,9 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
       assign mintthresh_q          = 32'h0;
       assign mintthresh_rd_error   = 1'b0;
 
-      assign mscratchcsw_q         = 32'h0;
+      // assign mscratchcsw_q         = 32'h0;
 
-      assign mscratchcswl_q        = 32'h0;
+      // assign mscratchcswl_q        = 32'h0;
 
     end
 
@@ -2105,7 +2107,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
         .LIB        (LIB),
         .WIDTH      (32),
         .MASK       (CSR_CPUCTRL_MASK),
-        .SHADOWCOPY (SECURE),
+        .SHADOWCOPY (SHADOW),
         .RESETVALUE (CPUCTRL_RESET_VAL)
       )
       cpuctrl_csr_i
@@ -2231,7 +2233,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
     .LIB        (LIB),
     .WIDTH      ($bits(privlvl_t)),
     .MASK       (CSR_PRV_LVL_MASK),
-    .SHADOWCOPY (SECURE),
+    .SHADOWCOPY (SHADOW),
     .RESETVALUE (PRIV_LVL_M)
   )
   priv_lvl_i
@@ -2356,7 +2358,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
             .LIB        (LIB),
             .WIDTH      ($bits(pmpncfg_t)),
             .MASK       (CSR_PMPNCFG_MASK),
-            .SHADOWCOPY (SECURE),
+            .SHADOWCOPY (SHADOW),
             .RESETVALUE (PMP_PMPNCFG_RV[i])
           )
           pmpncfg_csr_i
@@ -2395,7 +2397,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
             .LIB        (LIB),
             .WIDTH      (PMP_ADDR_WIDTH),
             .MASK       (CSR_PMPADDR_MASK[31-:PMP_ADDR_WIDTH]),
-            .SHADOWCOPY (SECURE),
+            .SHADOWCOPY (SHADOW),
             .RESETVALUE (PMP_PMPADDR_RV[i][31-:PMP_ADDR_WIDTH])
           )
           pmp_addr_csr_i
@@ -2502,7 +2504,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
         .LIB        (LIB),
         .WIDTH      ($bits(mseccfg_t)),
         .MASK       (CSR_MSECCFG_MASK),
-        .SHADOWCOPY (SECURE),
+        .SHADOWCOPY (SHADOW),
         .RESETVALUE (PMP_MSECCFG_RV)
       )
       pmp_mseccfg_csr_i
@@ -2635,7 +2637,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
   assign mstateen3h_rdata   = 32'h0;
 
   // dcsr_rdata factors in the flop outputs and the nmip bit from the controller
-  assign dcsr_rdata = DEBUG ? {dcsr_q[31:4], ctrl_fsm_i.pending_nmi, dcsr_q[2:0]} : 32'h0;
+  assign dcsr_rdata = (DEBUG != 0) ? {dcsr_q[31:4], ctrl_fsm_i.pending_nmi, dcsr_q[2:0]} : 32'h0;
 
 
   assign mcause_rdata = mcause_q;
@@ -2928,7 +2930,7 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
       if( (cnt_gidx == 1) ||
           (cnt_gidx >= (NUM_MHPMCOUNTERS+3) ) )
         begin : gen_non_implemented_mhpmcounter
-        assign mhpmcounter_q[cnt_gidx] = 'b0;
+        always_ff @(posedge clk) mhpmcounter_q[cnt_gidx] <= 'b0;
       end
       else begin : gen_implemented_mhpmcounter
         always_ff @(posedge clk, negedge rst_n)
@@ -2955,14 +2957,14 @@ module cv32e40s_cs_registers import cv32e40s_pkg::*;
       if( (evt_gidx < 3) ||
           (evt_gidx >= (NUM_MHPMCOUNTERS+3) ) )
         begin : gen_non_implemented_mhpmevent
-          assign mhpmevent_q[evt_gidx] = 'b0;
+          always_ff @(posedge clk) mhpmevent_q[evt_gidx] <= 'b0;
 
           logic unused_mhpmevent_signals;
           assign unused_mhpmevent_signals = (|mhpmevent_n[evt_gidx]) | (|mhpmevent_q[evt_gidx]) | (|mhpmevent_rdata[evt_gidx]);
       end
       else begin : gen_implemented_mhpmevent
         if (NUM_HPM_EVENTS < 32) begin : gen_tie_off
-             assign mhpmevent_q[evt_gidx][31:NUM_HPM_EVENTS] = 'b0;
+             always_ff @(posedge clk) mhpmevent_q[evt_gidx][31:NUM_HPM_EVENTS] <= 'b0;
         end
         always_ff @(posedge clk, negedge rst_n)
             if (!rst_n)
diff --git a/rtl/cv32e40s_csr.sv b/rtl/cv32e40s_csr.sv
index db2e6e3e..f6fef02b 100644
--- a/rtl/cv32e40s_csr.sv
+++ b/rtl/cv32e40s_csr.sv
@@ -12,7 +12,7 @@ module cv32e40s_csr #(
     parameter int unsigned    WIDTH = 32,
     parameter bit             SHADOWCOPY = 1'b0,
     parameter bit [WIDTH-1:0] RESETVALUE = '0,
-    parameter bit [WIDTH-1:0] MASK = {WIDTH{1'b1}}
+    parameter bit [WIDTH-1:0] MASK = '1
  ) (
     input  logic             clk,
     input  logic             rst_n,
@@ -30,7 +30,7 @@ module cv32e40s_csr #(
   assign rd_data_o = rdata_q;
 
   generate
-    if (SHADOWCOPY) begin : gen_hardened
+    if (SHADOWCOPY !=0) begin : gen_hardened
       logic             clk_gated;
       logic [WIDTH-1:0] rdata_d;
       logic [WIDTH-1:0] shadow_d;
@@ -71,23 +71,27 @@ module cv32e40s_csr #(
       end
 
     end else begin : gen_unhardened
-      for (genvar i = 0; i < WIDTH; i++) begin : gen_csr_unhardened
-        if (MASK[i]) begin : gen_unmasked_unhardened
-          // Bits with mask set are actual flipflops
-          always_ff @(posedge clk or negedge rst_n) begin
-            if (!rst_n) begin
-              rdata_q[i] <= RESETVALUE[i];
-            end else if (wr_en_i) begin
-              rdata_q[i] <= wr_data_i[i];
-            end
+    for (genvar i = 0; i < WIDTH; i++) begin : gen_csr_unhardened
+      if (MASK[i]) begin : gen_unmasked_unhardened
+        // Bits with mask set are actual flip-flops
+        always_ff @(posedge clk or negedge rst_n) begin
+          if (!rst_n) begin
+            rdata_q[i] <= RESETVALUE[i];
+          end else if (wr_en_i) begin
+            rdata_q[i] <= wr_data_i[i];
           end
-        end else begin : gen_masked_unhardened
-          // Bits with mask cleared are tied off to the reset value
-          assign rdata_q[i] = RESETVALUE[i];
         end
-      end // for
-      assign rd_error_o = 1'b0;
-    end
+      end else begin : gen_masked_unhardened
+        // Move assignment into always_ff to avoid conflict
+        always_ff @(posedge clk or negedge rst_n) begin
+          if (!rst_n)
+            rdata_q[i] <= RESETVALUE[i]; 
+        end
+      end
+    end // for
+    assign rd_error_o = 1'b0;
+  end
+
   endgenerate
 
 endmodule
diff --git a/rtl/cv32e40s_data_obi_interface.sv b/rtl/cv32e40s_data_obi_interface.sv
index 4714c2b0..8bb95cd6 100644
--- a/rtl/cv32e40s_data_obi_interface.sv
+++ b/rtl/cv32e40s_data_obi_interface.sv
@@ -85,7 +85,7 @@ module cv32e40s_data_obi_interface import cv32e40s_pkg::*;
 
   always_comb begin
     resp_o               = m_c_obi_data_if.resp_payload;
-    if (SECURE) begin : integrity
+    if (INTEGRITY) begin : integrity
       resp_o.integrity_err = rvalidpar_err_resp || gntpar_err_resp || rchk_err_resp;
       resp_o.integrity     = integrity_resp;
     end else begin : no_integrity
@@ -134,7 +134,7 @@ module cv32e40s_data_obi_interface import cv32e40s_pkg::*;
   /////////////////
 
   generate
-    if (SECURE) begin : secure
+    if (INTEGRITY) begin : secure
 
       // Always check gnt parity
       // alert_major will not update when in reset
diff --git a/rtl/cv32e40s_debug_triggers.sv b/rtl/cv32e40s_debug_triggers.sv
index 639d571c..fb723b68 100644
--- a/rtl/cv32e40s_debug_triggers.sv
+++ b/rtl/cv32e40s_debug_triggers.sv
@@ -78,7 +78,7 @@ import cv32e40s_pkg::*;
 );
 
   // Set mask for supported exception codes for exception triggers.
-  localparam logic [31:0] ETRIGGER_TDATA2_MASK = (1 << EXC_CAUSE_INSTR_BUS_FAULT) | ((SECURE) << EXC_CAUSE_INSTR_INTEGRITY_FAULT) | (1 << EXC_CAUSE_ECALL_MMODE) | ((USER) << EXC_CAUSE_ECALL_UMODE) | (1 << EXC_CAUSE_STORE_FAULT) |
+  localparam logic [31:0] ETRIGGER_TDATA2_MASK = (1 << EXC_CAUSE_INSTR_BUS_FAULT) | (32'(SECURE) << EXC_CAUSE_INSTR_INTEGRITY_FAULT) | (1 << EXC_CAUSE_ECALL_MMODE) | (32'(USER) << EXC_CAUSE_ECALL_UMODE) | (1 << EXC_CAUSE_STORE_FAULT) |
                                                  (1 << EXC_CAUSE_LOAD_FAULT) | (1 << EXC_CAUSE_BREAKPOINT) | (1 << EXC_CAUSE_ILLEGAL_INSN) | (1 << EXC_CAUSE_INSTR_FAULT);
 
 
@@ -110,8 +110,10 @@ import cv32e40s_pkg::*;
       logic [31:0] tdata1_n[DBG_NUM_TRIGGERS];
 
       // CSR instance outputs
-      logic [31:0] tdata1_q[DBG_NUM_TRIGGERS];
-      logic [31:0] tdata2_q[DBG_NUM_TRIGGERS];
+      // logic [31:0] tdata1_q[DBG_NUM_TRIGGERS];
+      // logic [31:0] tdata2_q[DBG_NUM_TRIGGERS];
+      logic [31:0] tdata1_q[DBG_NUM_TRIGGERS-1:0];
+      logic [31:0] tdata2_q[DBG_NUM_TRIGGERS-1:0];
       logic [31:0] tselect_q;
 
       // Shadowcopy rd_error outputs
@@ -121,8 +123,10 @@ import cv32e40s_pkg::*;
 
       // Fetch stage trigger match
       // CSR read data, possibly WARL resolved
-      logic [31:0] tdata1_rdata[DBG_NUM_TRIGGERS];
-      logic [31:0] tdata2_rdata[DBG_NUM_TRIGGERS];
+      // logic [31:0] tdata1_rdata[DBG_NUM_TRIGGERS];
+      // logic [31:0] tdata2_rdata[DBG_NUM_TRIGGERS];
+      logic [31:0] tdata1_rdata[DBG_NUM_TRIGGERS-1:0];
+      logic [31:0] tdata2_rdata[DBG_NUM_TRIGGERS-1:0];
 
       // IF, EX and WB stages trigger match
       logic [DBG_NUM_TRIGGERS-1 : 0] trigger_match_if;
@@ -135,7 +139,8 @@ import cv32e40s_pkg::*;
       // LSU address match signals
       logic [DBG_NUM_TRIGGERS-1 : 0] lsu_addr_match_en;
       logic [DBG_NUM_TRIGGERS-1 : 0] lsu_addr_match;
-      logic [3:0]                    lsu_byte_addr_match[DBG_NUM_TRIGGERS];
+      // logic [3:0]                    lsu_byte_addr_match[DBG_NUM_TRIGGERS];
+      logic [3:0]                    lsu_byte_addr_match[DBG_NUM_TRIGGERS-1:0];
 
       // Enable matching based on privilege level per trigger
       logic [DBG_NUM_TRIGGERS-1 : 0] priv_lvl_match_en_if;
@@ -148,7 +153,8 @@ import cv32e40s_pkg::*;
       logic [31:0] lsu_addr_high;     // The highest accessed address of an LSU transaction
 
       // Exception trigger code match
-      logic [31:0] exception_match[DBG_NUM_TRIGGERS];
+      // logic [31:0] exception_match[DBG_NUM_TRIGGERS];
+      logic [31:0] exception_match[DBG_NUM_TRIGGERS-1:0];
 
       // Resolve hit1+hit0 of mcontrol6
       logic [1:0] mcontrol6_hit_resolved[DBG_NUM_TRIGGERS];
@@ -527,7 +533,7 @@ import cv32e40s_pkg::*;
       assign trigger_match_if_o = '0;
       assign trigger_match_ex_o = '0;
       assign etrigger_wb_o = '0;
-      assign tdata1_n = '0;
+      // assign tdata1_n = '0;
       assign tdata2_n = '0;
       assign tselect_n = '0;
       assign tinfo_n = '0;
@@ -536,7 +542,7 @@ import cv32e40s_pkg::*;
       assign tdata1_we_r = 1'b0;
       assign tdata2_we_r = 1'b0;
 
-      assign unused_signals = (|tdata1_n) | (|tdata2_n) | (|tselect_n) | (|tinfo_n) |
+      assign unused_signals = /*(|tdata1_n) |*/ (|tdata2_n) | (|tselect_n) | (|tinfo_n) |
                               (|csr_wdata_i) | tdata1_we_i | tdata2_we_i | tselect_we_i | tinfo_we_i |
                               (|tdata1_n_r) | (|tdata2_n_r) | tdata1_we_r | tdata2_we_r;
     end
diff --git a/rtl/cv32e40s_ex_stage.sv b/rtl/cv32e40s_ex_stage.sv
index 1ffd71e9..a0565dfc 100644
--- a/rtl/cv32e40s_ex_stage.sv
+++ b/rtl/cv32e40s_ex_stage.sv
@@ -473,8 +473,8 @@ module cv32e40s_ex_stage import cv32e40s_pkg::*;
   assign forced_nop_valid = 1'b1;
 
   // CLIC and mret pointers pass through the EX stage in a single cycle
-  assign clic_ptr_valid = 1'b1;
-  assign mret_ptr_valid = 1'b1;
+  // assign clic_ptr_valid = 1'b1;
+  // assign mret_ptr_valid = 1'b1;
 
   // EX stage is ready immediately when killed and otherwise when its functional units are ready,
   // unless the stage is being halted. The late (data_rvalid_i based) downstream wb_ready_i signal
@@ -488,8 +488,8 @@ module cv32e40s_ex_stage import cv32e40s_pkg::*;
                        (id_ex_pipe_i.mul_en && mul_valid)                   ||
                        (id_ex_pipe_i.div_en && div_valid)                   ||
                        (id_ex_pipe_i.lsu_en && lsu_valid_i)                 ||
-                       (id_ex_pipe_i.instr_meta.clic_ptr && clic_ptr_valid) ||
-                       (id_ex_pipe_i.instr_meta.mret_ptr && mret_ptr_valid) ||
+                       (id_ex_pipe_i.instr_meta.clic_ptr ) ||
+                       (id_ex_pipe_i.instr_meta.mret_ptr) ||
                        (forced_nop && forced_nop_valid)
                       ) && instr_valid;
 
diff --git a/rtl/cv32e40s_if_stage.sv b/rtl/cv32e40s_if_stage.sv
index 3e4c3605..e4226bc2 100644
--- a/rtl/cv32e40s_if_stage.sv
+++ b/rtl/cv32e40s_if_stage.sv
@@ -499,7 +499,7 @@ module cv32e40s_if_stage import cv32e40s_pkg::*;
 
 
         if_id_pipe_o.priv_lvl         <= prefetch_priv_lvl;
-        if_id_pipe_o.trigger_match    <= dummy_insert ? 1'b0 : trigger_match_i;
+        if_id_pipe_o.trigger_match    <= dummy_insert ? 32'b0 : trigger_match_i;
         if_id_pipe_o.last_op          <= last_op_o;
         if_id_pipe_o.first_op         <= first_op;
         if_id_pipe_o.abort_op         <= abort_op_o;
diff --git a/rtl/cv32e40s_instr_obi_interface.sv b/rtl/cv32e40s_instr_obi_interface.sv
index f3bb8ce8..81661f3c 100644
--- a/rtl/cv32e40s_instr_obi_interface.sv
+++ b/rtl/cv32e40s_instr_obi_interface.sv
@@ -87,7 +87,7 @@ module cv32e40s_instr_obi_interface import cv32e40s_pkg::*;
 
   always_comb begin
     resp_o                = m_c_obi_instr_if.resp_payload;
-    if (SECURE) begin : integrity
+    if (INTEGRITY) begin : integrity
       resp_o.integrity_err = rvalidpar_err_resp || gntpar_err_resp || rchk_err_resp;
       resp_o.integrity     = integrity_resp;
     end else begin : no_integrity
@@ -208,7 +208,7 @@ module cv32e40s_instr_obi_interface import cv32e40s_pkg::*;
   //////////////////////////////////////
 
   generate
-    if (SECURE) begin : secure
+    if (INTEGRITY) begin : secure
 
       // Always check gnt parity
       // alert_major will not update when in reset
diff --git a/rtl/cv32e40s_register_file_wrapper.sv b/rtl/cv32e40s_register_file_wrapper.sv
index 4556d5ed..18a04311 100644
--- a/rtl/cv32e40s_register_file_wrapper.sv
+++ b/rtl/cv32e40s_register_file_wrapper.sv
@@ -92,7 +92,7 @@ module cv32e40s_register_file_wrapper import cv32e40s_pkg::*;
   endgenerate
 
   generate
-    if (SECURE) begin
+    if (RFECC) begin
       cv32e40s_register_file_ecc
         #(
           .REGFILE_NUM_READ_PORTS ( REGFILE_NUM_READ_PORTS )
@@ -118,7 +118,9 @@ module cv32e40s_register_file_wrapper import cv32e40s_pkg::*;
          );
     end else begin // if (SECURE)
       assign ecc_err_o = 1'b0;
-      assign rf_wdata  = wdata_i;
+      for (genvar i = 0; i < REGFILE_NUM_WRITE_PORTS; i++) begin
+        assign rf_wdata[i] = wdata_i[i];
+      end
     end
   endgenerate
 
diff --git a/rtl/include/cv32e40s_pkg.sv b/rtl/include/cv32e40s_pkg.sv
index 0cabafc4..fe441530 100644
--- a/rtl/include/cv32e40s_pkg.sv
+++ b/rtl/include/cv32e40s_pkg.sv
@@ -820,6 +820,8 @@ parameter logic [31:0] TDATA1_RST_VAL = {
 
 // Enable Security Features
 parameter SECURE = 1;
+parameter INTEGRITY = 0;
+parameter RFECC = 0;
 
 // Enable User Mode
 parameter bit USER = SECURE;